@model Skoda_DCMS.Models.ECFResults
@{
    bool IsValidityCheck = true;
    dynamic FlagRedirect = null;
    Skoda_DCMS.Models.ECFData ECF = null;
    int FormId = 0, AppRowId = 0, ApprovalType = 0;
    int FormSrId = 0;
    string Department = "";
    bool IsNewMode = true, IsEditMode = false, IsViewMode = false;
    string disabled = "";
    var currentUser = (Skoda_DCMS.Models.UserData)HttpContext.Current.Session["UserData"];
    List<Skoda_DCMS.Models.ApprovalDataModel> appList = new List<Skoda_DCMS.Models.ApprovalDataModel>();
    var CurrentUserDesgn = "";
    string HrAdmin = "HR & Admin";
    string HRC = "HRC";
    string Treasury = "Treasury";
    if (ViewBag != null && !ViewBag.IsNewMode)
    {
        IsNewMode = ViewBag.IsNewMode;
        IsEditMode = ViewBag.IsEditMode;
        IsViewMode = ViewBag.IsViewMode;
        disabled = IsViewMode ? "disabled" : "";
        ECF = ViewBag.Model.one[0] as Skoda_DCMS.Models.ECFData;
        FormId = ViewBag.FormId;
        AppRowId = ViewBag.AppRowId;
        IsValidityCheck = ViewBag.IsValidityCheck != null ? (bool)ViewBag.IsValidityCheck : false;
        ApprovalType = ViewBag.ApprovalType != null ? (int)ViewBag.ApprovalType : 0;
        Department = ViewBag.Department;
        appList = ViewBag.Model?.three as List<Skoda_DCMS.Models.ApprovalDataModel>;
        if (IsViewMode)
        {
            foreach (var item in appList)
            {
                if (item.ApproverStatus.ToLower() == "approved")
                {
                    foreach (var app in appList.Where(x => (x.AssistantForEmployeeUserName == item.ApproverUserName || x.AssistantForEmployeeUserName == item.AssistantForEmployeeUserName) && x.Level == item.Level && x.IsActive == 0))
                    {
                        app.ApproverStatus = item.ApproverStatus;
                    }
                }
            }
            //var Ap = appList?.Where(x =>
            //    x.UserName == currentUser.UserName
            //    && x.ApproverStatus.ToLower() == "pending"
            //).FirstOrDefault();
            //CurrentUserDesgn = string.IsNullOrEmpty(Ap?.AssistantForEmployeeUserName) ? Ap?.Designation : appList.Find(x => x.UserName.ToLower() == Ap?.AssistantForEmployeeUserName.ToLower())?.Designation;
            var Ap = appList?.Where(x =>
                x.ApproverUserName.ToLower() == currentUser.UserName.ToLower()
                && x.ApproverStatus.ToLower() == "pending"
            ).FirstOrDefault();
            while (Ap?.RelationWith != null && Ap?.RelationWith != 0)
            {
                Ap = appList.Find(x => x.RelationId == Ap.RelationWith);
            }
            CurrentUserDesgn = Ap?.Designation;
        }
        //var CurrentUserLevel = Ap?.Level;
        ////Logic to change assistant to doctor(if he/she has) for editing the fields doctor fields
        //CurrentUserDesgn = appList.Where(x => x.Level == CurrentUserLevel && x.Logic.ToLower() == "or").Where(x => x.Designation == HRC || x.Designation == HrAdmin || x.Designation == Treasury).FirstOrDefault()?.Designation ?? CurrentUserDesgn;
        //var CurrentUserApproverData = appList.Where(x => x.ApproverId == currentUser.UserId && x.ApproverStatus.ToLower() == "pending" && x.Logic.ToLower() == "or").FirstOrDefault();
        //CurrentUserDesgn = CurrentUserApproverData.AssistantForEmpUserId != 0
        //        ? appList.Where(x => x.ApproverId == CurrentUserApproverData.AssistantForEmpUserId && ).FirstOrDefault().Designation
        //        : "";
        //var approved = appList?.Where(x => x.ApproverStatus.ToLower() == "approved");
        //CurrentUserDesgn = appList?.Where(x => x.ApproverId == currentUser.UserId && x.ApproverStatus.ToLower() == "pending" && appList. x.ApproverStatus.ToLower() == "pending").FirstOrDefault().Designation.ToLower().Contains("assistant to") ? ;

    }
    ViewBag.Title = "Employee Clearance Form";
}
@*Loader*@
<style>

    .deviationDate {
        /*max-width: fit-content !important;*/
        /* max-width:20px;*/
        width: 15px;
        margin-left: 1px;
        margin-right: 1px;
        height: 30px !important;
        border: none !important;
        max-width: 95px !important;
        background-color: #fff !important;
        outline: none !important;
    }

    .astColor {
        color: red;
    }

    /*New design css start here*/

    .textTrans {
        width: 100%;
        max-width: 99%;
        border-radius: 5px;
        margin-right: 0px;
        border: 1px solid #BFBFBF !important;
    }

    .empDetailsBg {
        background-color: #fffbef;
    }

    #accordion select {
        color: #000;
        width: 100% !important;
        max-width: 97%;
        height: 45px;
        background-color: #fff;
        border: 1px solid #BFBFBF;
        box-sizing: border-box;
        border-radius: 5px;
        background-image: url(data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>);
        background-repeat: no-repeat;
        background-position: right .75rem center;
        background-size: 16px 12px;
    }

    #accordion input[type='text'] {
        width: 100% !important;
        max-width: 100%;
        height: 45px;
        background-color: #fff;
        border: 1px solid #BFBFBF !important;
        box-sizing: border-box;
        border-radius: 5px !important;
    }

    #accordion input[type='date'] {
        width: 100% !important;
        max-width: 100%;
        height: 45px;
        background-color: #F8F8F8;
        border: 1px solid #BFBFBF !important;
        box-sizing: border-box;
        border-radius: 5px;
    }

    #accordion input[type='time'] {
        height: 45px;
    }

    #accordion label {
        font-size: 16px;
        line-height: 22px;
        font-weight: 600;
        color: #201F1F;
    }

    #accordion table tr td {
        font-size: 16px;
        line-height: 19px;
        color: #201F1F;
        background-color: white;
    }

    #accordion label {
        display: block;
    }

    #accordion .card-header {
        background: rgb(4 59 100) !important;
        border-radius: 5px 5px 0px 0px;
        position: relative;
        margin-top: 15px;
    }

        #accordion .card-header.collapsed h5:after {
            content: '+';
            position: absolute;
            right: 22px;
            top: 17px;
            font-size: 20px;
            font-weight: 600;
            color: #fff;
        }

        #accordion .card-header h5:after {
            content: '-';
            position: absolute;
            right: 22px;
            top: 17px;
            font-size: 20px;
            font-weight: 600;
            color: #fff;
        }

    #accordion h5 button {
        font-size: 18px;
        line-height: 22px;
        /* identical to box height */
        padding-left: 0px;
        display: flex;
        align-items: center;
        text-transform: uppercase;
        /* Text_white */

        color: #FFFFFF;
    }

        #accordion h5 button:focus {
            box-shadow: none;
        }

    .empDetailsFields label {
        display: block !important;
        margin-bottom: 0px;
    }

    .empDetailsFields .row label {
        display: block;
        margin-bottom: 0px;
    }

        .empDetailsFields .row label:nth-child(1) {
            font-style: normal;
            font-weight: normal !important;
            font-size: 12px;
            line-height: 18px;
            color: #A9A9A9 !important;
        }

        .empDetailsFields .row label:nth-child(2) {
            font-style: normal;
            font-weight: normal;
            font-size: 18px;
            line-height: 22px;
            color: #201F1F;
        }

    .firstLastName {
        font-style: normal;
        font-weight: normal;
        font-size: 20px;
        line-height: 24px;
        /* identical to box height */

        display: flex;
        align-items: center;
        color: #201F1F;
    }

    .submit-btn {
        background: #3D3D3D;
        border-radius: 5px;
        font-style: normal;
        font-weight: normal;
        font-size: 16px;
        line-height: 173.7%;
        /* identical to box height, or 28px */
        padding: 0.5rem 2rem;
        display: flex;
        align-items: center;
        text-align: center;
        text-transform: uppercase;
        color: #FFFFFF;
        border-color: transparent !important;
    }

    .cancl-btn {
        background: #FAE99B;
        border-radius: 5px;
        font-style: normal;
        font-weight: normal;
        font-size: 16px;
        border-color: transparent !important;
        line-height: 173.7%;
        /* identical to box height, or 28px */
        padding: 0.5rem 2rem;
        display: flex;
        align-items: center;
        text-align: center;
        text-transform: uppercase;
        color: #212221;
        margin-left: 10px;
    }




    .card-footer {
        display: flex;
        background-color: transparent !important;
    }

    .photo-form {
        width: 100%;
    }

    .ui-front {
        z-index: 9999999 !important;
    }
    /*Animation CSS Starts*/

    div.input-block {
        position: relative;
    }

        div.input-block input {
            font-weight: 500;
            font-size: 1rem;
            color: #000;
            width: 188px;
            padding: 15px 15px;
            border-bottom-left-radius: 5px !important;
            border-top-left-radius: 5px !important;
            border-bottom-right-radius: 0px !important;
            border-top-right-radius: 0px !important;
            border: 1px solid #D9D9D9;
            outline: none;
        }

        div.input-block textarea {
            font-weight: 500;
            font-size: 1rem;
            color: #000;
            width: 100%;
            padding: 15px 15px;
            border-bottom-left-radius: 5px !important;
            border-top-left-radius: 5px !important;
            border-bottom-right-radius: 0px !important;
            border-top-right-radius: 0px !important;
            background-color: #fff;
            border: 1px solid #D9D9D9;
            outline: none;
        }

        div.input-block span.placeholder {
            position: absolute;
            margin: 17px 0;
            padding: 0 4px;
            font-family: Roboto, sans-serif;
            color: #6c757d;
            display: flex;
            align-items: center;
            font-size: 1rem;
            top: -6px;
            left: 15px;
            transition: all 0.2s;
            transform-origin: 0% 0%;
            background: none;
            pointer-events: none;
            z-index: 1;
        }

        div.input-block textarea:focus + span.placeholder {
            transform: scale(0.8) translateY(-25px);
            background-color: #fff !important;
        }

        div.input-block textarea:valid + span.placeholder,
        div.input-block textarea:focus + span.placeholder {
            transform: scale(0.8) translateY(-25px) !important;
            background: #fff !important;
        }

        div.input-block input:valid + span.placeholder,
        div.input-block input:focus + span.placeholder {
            transform: scale(0.8) translateY(-25px);
            background-color: #fff;
        }

    .empDetailsFields div.input-block input:valid + span.placeholder,
    .empDetailsFields div.input-block input:focus + span.placeholder {
        transform: scale(0.8) translateY(-25px);
        background-color: rgb(219,238,213);
    }

    div.input-block input.spanUpperSide + span.placeholder {
        transform: scale(0.8) translateY(-25px);
        background-color: rgb(219,238,213);
    }

    .empDetailsFields div.input-block input:read-only + span.placeholder,
    .empDetailsFields div.input-block input:read-only + span.placeholder {
        transform: scale(0.8) translateY(-25px);
        background-color: rgb(219,238,213);
    }

    div.input-block input:read-only + span.placeholder,
    div.input-block input:read-only + span.placeholder {
        transform: scale(0.8) translateY(-25px);
        background-color: #fff;
    }


    div.inputSelect span.placeholder {
        position: absolute;
        margin: 17px 0;
        padding: 0 4px;
        font-family: Roboto, sans-serif;
        color: #000;
        display: flex;
        align-items: center;
        font-size: 1rem;
        top: -6px;
        left: 15px;
        transition: all 0.2s;
        transform-origin: 0% 0%;
        background: none;
        pointer-events: none;
        z-index: 1;
    }

   @* div.inputSelect select:focus + span.placeholder {
        transform: scale(0.8) translateY(-25px);
        background: #fff;
        z-index: 9;
    }

    .empDetailsFields div.inputSelect select:focus + span.placeholder {
        transform: scale(0.8) translateY(-25px);
        background: #fff;
        z-index: 9;
    }*@

    div.inputSelect select:not([value=""]):valid + span.placeholder {
        transition: all 0.2s;
        transform-origin: 0% 0%;
    }



    div.input-block input:focus + span.placeholder {
        color: #284B63;
    }

    .breadcrumb {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        padding: 1rem 1rem 0;
        margin-bottom: 0;
        list-style: none;
        background-color: #FFFFFF;
        border-radius: .25rem;
    }

    body.nav-sm .container.body .left_col {
        width: 63px;
        padding: 0;
        position: fixed;
        height: 100%;
        z-index: 8;
    }

    .card {
        position: relative;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 0px;
        border-radius: .25rem;
    }

    .dropdown-toggle::after {
        display: none;
        width: 0;
        height: 0;
        margin-left: .255em;
        vertical-align: .255em;
        content: "";
        border-top: .3em solid;
        border-right: .3em solid transparent;
        border-bottom: 0;
        border-left: .3em solid transparent;
    }

    input.spanUpperSide + span.placeholder {
        background-color: rgb(219,238,213);
    }

    inputSelect.spanUpperSide + span.placeholder {
        background-color: rgb(219,238,213) !important;
    }

    select.spanUpperSide + span.placeholder {
        transform: scale(0.8) translateY(-25px) !important;
        background-color: #fff !important;
        z-index: 9;
    }

    .empDetailsFields select.spanUpperSide + span.placeholder {
        transform: scale(0.8) translateY(-25px) !important;
        background-color: rgb(219,238,213) !important;
        ;
        z-index: 9;
    }

    textarea.spanUpperSide + span.placeholder {
        transform: scale(0.8) translateY(-25px) !important;
        background: #fff !important;
        z-index: 9;
    }

    .TransView {
        background-color: white !important;
    }

    @@media only screen and (min-width: 992px) {
        div .input-block span.placeholder {
            font-size: 15px;
        }

        div.inputSelect span.placeholder {
            font-size: 14px;
        }
    }

    input[type='date'].spanUpperSide + span.placeholder {
        transform: scale(0.8) translateY(-25px) !important;
        background: #fff !important;
        z-index: 9;
    }

    .showBorder {
        border: 1px solid #dee2e6;
    }

    .forSameHt {
        padding-bottom: 40px;
        height: 78px !important;
    }

    .forPoints input[type='checkbox'] {
        margin-right: 2px;
        position: relative;
        top: 2px;
    }

    #lblReason {
        font-size: 16px !important;
    }

    #drpCurrency {
        max-width: 100% !important;
    }
</style>
@*Loader*@
<style type="text/css">
    #loader {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        z-index: 10000;
    }
</style>
<script type="text/javascript">

    function checkSelect(id) {

        if ($('#' + id).val() != '') {
            $('#' + id).addClass('spanUpperSide');
        }
    }
    /*$('#timedemo').pickatime({ twelvehour: true });*/

</script>

@*Loader*@
<div class="container">

    <form action="/EmployeeClearance/SaveECF" id="ECFForm" method="post">
        <div class="main_container">

            <div class="right_col bg-transparent" role="main">

                <div class="">
                    <div class="breadcrumb-container height-space">
                        <div>
                            @if (IsEditMode || IsViewMode)
                            {
                                <div>
                                    <input type="hidden" id="FormSrId" name="FormSrId" value="@(ECF.Id)" />
                                    <input type="hidden" id="FormId" name="FormId" value="@(FormId)" />
                                    <input type="hidden" id="AppRowId" name="AppRowId" value="@(AppRowId)" />
                                </div>
                            }
                            <ol class="breadcrumb">
                                <li>
                                    <a href="/Dashboard?formName=ECF">
                                        Dashboard
                                    </a>
                                </li>
                                <li>
                                    Employee Clearance Form
                                </li>

                            </ol>
                        </div>
                    </div>
                    <div class="row breadcrumb-container table-bordered  mr-1 ml-1" style="background-color: rgb(219,238,213) !important; ">
                        <div class="col-md-2 col-lg-2">
                            <span class="placeholder">Date : @(IsViewMode || IsEditMode ? (Convert.ToDateTime(appList.FirstOrDefault().FormId.CreatedDate).ToShortDateString()) : DateTime.Now.ToShortDateString())</span>
                        </div>
                        <div class="col-md-8 col-lg-8 mt-2 mb-1 form-heading" style="text-align:center; margin-top:5px">
                            <span> Employee Clearance Form</span>
                        </div>
                        <div class="col-md-2 col-lg-2">
                            @if (IsViewMode || IsEditMode)
                            {
                                <span class="placeholder"> Form Id : @(IsViewMode || IsEditMode ? ("ECF" + FormId ?? "") : "" )</span>
                            }
                        </div>
                    </div>
                    <div class="row breadcrumb-container table-bordered  mr-1 ml-1" style="background-color: rgb(219,238,213) !important; ">
                        <label style="color:red;font-size:x-large">Note: This form is disable till further notice. For more information please contact your respective HR.</label>
                    </div>
                </div>
                <div class="heading d-none" id="headingErr">
                    <h1 id="" class="info-header">Following fields are mandatory. Please fill in information for<br /></h1>
                    <div id="add_to_me" class="header-list" style="color:red;"></div>
                </div>

                @* Submitter Section *@
                @{
                    Html.RenderPartial("_SubmitterDetailsWithModel", (ViewBag as object));
                }

                @* Applicant Section *@
                @{
                    Html.RenderPartial("_ApplicantDetailsWithModel", (ViewBag as object));
                }

                @* Transaction Section *@
                <div id="accordion">
                    <div class="card">
                        <div class="card-header collapsed" id="headingOne" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                            <h5 class="mb-0">
                                <button type="button" class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                    <img src="~/assets/img/transactionIcon.svg" width="24" height="24" class="mr-2" />Transaction Fields
                                </button>
                            </h5>
                        </div>
                        <div id="collapseOne" class="collapse" aria-labelledby="headingOne" data-parent="#accordion">
                            <div class="card-body">

                                <div class="form-row">
                                    <div class="table mainTbl form-table-container-2 bg-color">

                                        <div class="form-group col-md-3 col-lg-3 col-12 input-block">
                                            <input type="date" name="txtDateOfJoining" class="w-40 spanUpperSide" id="txtDateOfJoining"
                                                   onclick="setStartDate()" value="@(ECF?.DateOfJoining.ToString("yyyy-MM-dd"))" @(disabled)>
                                            <span class="placeholder">Date of Joining <span class="astColor">*</span></span>
                                        </div>

                                        <div class="form-group col-md-3 col-12 input-block">
                                            <input type="date" name="txtDateOfRelieving" class="w-40" id="txtDateOfRelieving"
                                                   onclick="setStartDate()" value="@(ECF?.DateOfRelieving.ToString("yyyy-MM-dd"))" @(disabled)>
                                            <span class="placeholder">Date Of Relieving <span class="astColor">*</span></span>
                                        </div>

                                        <div class="form-group col-md-3 col-12 input-block">
                                            <input type="date" name="txtResignationGivenDate" class="w-40" id="txtResignationGivenDate" @*onclick="setStartDate()"*@
                                                   value="@(ECF?.ResignationGivenDate?.ToString("yyyy-MM-dd") ?? "")" @(disabled)
                                                   onchange="checkSelect('txtResignationGivenDate')">
                                            <span class="placeholder TransView">Resignation given date<span class="astColor">*</span></span>
                                        </div>

                                        <div class="form-group col-md-3 col-12 input-block autocompleteHandOver-div">
                                            <input type="text" name="txtChargeHandedOverToEmpName" class="w-40" id="txtChargeHandedOverToEmpName"
                                                   value="@(ECF?.ChargeHandOverToEmpName ?? "")" @(disabled)>
                                            <span class="placeholder">Charge to be handed over to: <span class="astColor">*</span></span>
                                            <input type="hidden" class="txtDisable" name="txtChargeHandedOverToEmpNumber"
                                                   id="txtChargeHandedOverToEmpNumber" value="@(ECF?.ChargeHandOverToEmpNum.ToString() ?? "")">
                                        </div>

                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group col-md-12 col-12 input-block">
                                        <textarea class="textTrans @(String.IsNullOrEmpty(ECF?.BusinessNeed) ? "" : "spanUpperSide")" cols="90" rows="3" name="txtBusinessNeed"
                                                  id="txtBusinessNeed" maxlength="500" required @(disabled)>@(ECF?.BusinessNeed ?? "")</textarea>
                                        <span class="placeholder">Business Function & Responsibility (Max. 500) <span class="astColor">*</span></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @* Approval Section And Action Section *@
                        @if (IsViewMode || IsEditMode)
                        {
                            //Approval Section
                            <div id="accordion">
                                <div class="card">
                                    <div class="card-header collapsed" id="headingFour" data-toggle="collapse" data-target="#collapseFour" aria-expanded="true" aria-controls="collapseFour">
                                        <h5 class="mb-0">
                                            <button type="button" class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseFour" aria-expanded="true" aria-controls="collapseFour">
                                                <img src="~/assets/img/approvalTracking.svg" width="24" height="24" class="mr-2" />Approval Tracking
                                            </button>
                                        </h5>
                                    </div>
                                    <div id="collapseFour" class="collapse" aria-labelledby="headingFour">
                                        <div class="card-body">
                                            <div class="form-row">
                                                <div class="col-12">
                                                    <table class="table w-100 td-border showBorder">
                                                        <thead>
                                                            <tr>
                                                                @*<th>Sr. No.</th>*@
                                                                <th>Name</th>
                                                                <th>Role</th>
                                                                <th>Content</th>
                                                                <th>Processed on</th>
                                                                <th>Status</th>
                                                                <th class="text-center">Comments</th>
                                                                <th class="text-center">Approval Level</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @if (IsViewMode || IsEditMode)
                                                            {
                                                                Html.RenderPartial("_ApprovalTracking", appList);
                                                            }

                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            //Action Section
                            <div id="accordion">
                                <div class="card">
                                    <div class="card-header collapsed" id="headingFive" data-toggle="collapse" data-target="#collapseFive" aria-expanded="true" aria-controls="collapseFive">
                                        <h5 class="mb-0">
                                            <button type="button" class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseFive" aria-expanded="true" aria-controls="collapseFive">
                                                <img src="~/assets/img/approvalTracking.svg" width="24" height="24" class="mr-2" /> Action
                                            </button>
                                        </h5>
                                    </div>

                                    <div id="collapseFive" class="collapse action-accordion" aria-labelledby="headingFive">
                                        <div class="card-body actionTab">
                                            <div class="form-row">
                                                <div class="form-group col-md-4 col-lg-4 col-12">
                                                    <label id="lblDisciplinaryAction" readOnly class="f-600">
                                                        Any disciplinary action taken in the assessment period<span class="astColor">*</span>
                                                    </label>
                                                </div>
                                                <div class="form-group col-md-2 col-lg-2 col-12">
                                                    <label class="checkbox-container">
                                                        <label class="f-600">Yes</label>
                                                        <input type="checkbox" name="chkDisciplinaryActionYes" id="chkDisciplinaryActionYes"
                                                               @(ECF?.DisciplinaryAction == "Yes" ? "checked" : "")
                                                               @(CurrentUserDesgn == HRC ? "" : "disabled")>
                                                        <span class="checkmark"></span>
                                                    </label>
                                                </div>
                                                <div class="form-group col-md-2 col-lg-2 col-12">
                                                    <label class="checkbox-container">
                                                        <label class="f-600">No</label>
                                                        <input type="checkbox" name="chkDisciplinaryActionNo" id="chkDisciplinaryActionNo"
                                                               @(ECF?.DisciplinaryAction == "No" ? "checked" : "")
                                                               @(CurrentUserDesgn == HRC ? "" : "disabled")>
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <input type="hidden" name="chkDisciplinaryAction" id="chkDisciplinaryAction" value="@(ECF?.DisciplinaryAction ?? "")" />
                                                </div>
                                            </div>

                                            <div class="form-row">
                                                <div class="form-group col-md-4 col-lg-4 col-12">
                                                    <label id="lblCreditCard" readOnly class="f-600">
                                                        Credit card<span class="astColor">*</span>
                                                    </label>
                                                </div>
                                                <div class="form-group col-md-2 col-lg-2 col-12">
                                                    <label class="checkbox-container">
                                                        <label class="f-600">Yes</label>
                                                        <input type="checkbox" name="chkCreditCardYes" id="chkCreditCardYes"
                                                               @(ECF?.CreditCard == "Yes" ? "checked" : "")
                                                               @(CurrentUserDesgn == Treasury ? "" : "disabled")>
                                                        <span class="checkmark"></span>
                                                    </label>
                                                </div>
                                                <div class="form-group col-md-2 col-lg-2 col-12">
                                                    <label class="checkbox-container">
                                                        <label class="f-600">No</label>
                                                        <input type="checkbox" name="chkCreditCardNo" id="chkCreditCardNo"
                                                               @(ECF?.CreditCard == "No" ? "checked" : "")
                                                               @(CurrentUserDesgn == Treasury ? "" : "disabled")>
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <input type="hidden" name="chkCreditCard" id="chkCreditCard" value="@(ECF?.CreditCard ?? "")" />
                                                </div>
                                            </div>

                                            <div class="form-row">
                                                <div class="form-group col-md-4 col-12 input-block">
                                                    <input type="date" name="txtResignationReceivedDate" class="w-40" id="txtResignationReceivedDate" @*onclick="setStartDate()"*@
                                                           value="@(ECF?.ResignationReceivedDate?.ToString("yyyy-MM-dd") ?? "")"
                                                           @(CurrentUserDesgn == HrAdmin ? "" : "disabled")
                                                           onchange="checkSelect('txtResignationReceivedDate')">
                                                    <span class="placeholder TransView">Resignation received on<span class="astColor">*</span></span>
                                                </div>
                                            </div>

                                            <div class="form-row">
                                                <div class="form-group col-md-4 col-lg-4 col-12">
                                                    <label id="lblNoticePeriod" readOnly class="f-600">Notice period<span class="astColor">*</span></label>
                                                </div>
                                                <div class="form-group col-md-2 col-lg-2 col-12">
                                                    <label class="checkbox-container">
                                                        <label class="f-600">Applicable</label>
                                                        <input type="checkbox" name="chkNoticePeriodApplicable" id="chkNoticePeriodApplicable"
                                                               @(ECF?.NoticePeriod?.ToLower() == "applicable" ? "checked" : "")
                                                               @(CurrentUserDesgn == HrAdmin ? "" : "disabled")>
                                                        <span class="checkmark"></span>
                                                    </label>
                                                </div>
                                                <div class="form-group col-md-2 col-lg-2 col-12">
                                                    <label class="checkbox-container">
                                                        <label class="f-600">Not Applicable</label>
                                                        <input type="checkbox" name="chkNoticePeriodNotApplicable" id="chkNoticePeriodNotApplicable"
                                                               @(ECF?.NoticePeriod?.ToLower() == "not applicable" ? "checked" : "")
                                                               @(CurrentUserDesgn == HrAdmin ? "" : "disabled")>
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <input type="hidden" name="chkNoticePeriod" id="chkNoticePeriod" value="@(ECF?.NoticePeriod ?? "")" />
                                                </div>
                                                <div class="form-group col-md-4 col-lg-4 col-12 input-block @(ECF?.ApplicableDays > 0 ? "" : "d-none")" id="divApplicableDays">
                                                    <input type="text" class="w-100" name="txtNoticeApplicableDays" id="txtNoticeApplicableDays" maxlength="3"
                                                           value="@(ECF?.ApplicableDays.ToString() ?? "")" onkeypress="allowNumbersOnly(event)"
                                                           @(CurrentUserDesgn == HrAdmin ? "" : "disabled") />
                                                    <span class="placeholder">Applicable Days</span>
                                                </div>
                                            </div>

                                            <div class="form-row">
                                                <div class="form-group col-md-4 col-lg-4 col-12">
                                                    <label id="lblEligibleForGratuity" readOnly class="f-600">Eligible for Gratuity <span class="astColor">*</span></label>
                                                </div>
                                                <div class="form-group col-md-2 col-lg-2 col-12">
                                                    <label class="checkbox-container">
                                                        <label class="f-600">Yes</label>
                                                        <input type="checkbox" name="chkGratuityYes" id="chkGratuityYes"
                                                               @(ECF?.Gratuity?.ToLower() == "yes" ? "checked" : "")
                                                               @(CurrentUserDesgn == HrAdmin ? "" : "disabled")>
                                                        <span class="checkmark"></span>
                                                    </label>
                                                </div>
                                                <div class="form-group col-md-2 col-lg-2 col-12">
                                                    <label class="checkbox-container">
                                                        <label class="f-600">No</label>
                                                        <input type="checkbox" name="chkGratuityNo" id="chkGratuityNo"
                                                               @(ECF?.Gratuity?.ToLower() == "no" ? "checked" : "")
                                                               @(CurrentUserDesgn == HrAdmin ? "" : "disabled")>
                                                        <span class="checkmark"></span>
                                                    </label>
                                                    <input type="hidden" name="chkGratuity" id="chkGratuity" value="@(ECF?.Gratuity ?? "")" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        @* Buttons *@
                        @if (IsNewMode)
                        {
                            <div class="card-footer align-content-center">
                                <button type="button" class="btn btn-primary btn-sm submit-btn" title="This form is disable till further notice. For more information please contact your respective HR." disabled id="btnSubmit">
                                    Submit
                                </button>
                                <button type="reset" class="btn btn-danger btn-sm cancl-btn" id="btnCancel">
                                    Cancel
                                </button>
                            </div>
                        }
                        else if (IsEditMode)
                        {
                            <div class="card-footer align-content-center">
                                <button type="button" class="btn btn-primary btn-sm submit-btn" id="btnSubmit">
                                    Re-Submit
                                </button>
                                <button type="reset" class="btn btn-danger btn-sm cancl-btn" id="btnCancel">
                                    Cancel
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<div class="modal fade" id="successModel" tabindex="-1" role="dialog" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header modelHeader">
                <span class="modal-title modalMsgTitle" id="modalTitle"></span>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <label id="modalBody" class="lableMsg">  </label>
                <input type="hidden" id="tab" value="0" />
            </div>
            <div class="modal-footer">
                <button type="button" class="submitBomBtn publishBtn" id="modalOkButton">OK</button>
            </div>
        </div>
    </div>
</div>
<script>
    var spinner = $('#loader');
    var IsNewMode = @Html.Raw(Json.Encode(IsNewMode));
    var IsEditMode = @Html.Raw(Json.Encode(IsEditMode));
    var IsViewMode = @Html.Raw(Json.Encode(IsViewMode));
    var ECF = @Html.Raw(Json.Encode(ECF));
    var appRowId = @Html.Raw(Json.Encode(AppRowId));
    var approvalType =@Html.Raw(Json.Encode(ApprovalType));
    var IsValidityCheck = @Html.Raw(Json.Encode(IsValidityCheck));
    var Department = @Html.Raw(Json.Encode(Department));
    var FlagRedirect = @Html.Raw(Json.Encode(FlagRedirect));
    var CurrentUserDesgn = @Html.Raw(Json.Encode(CurrentUserDesgn));
    var RequiredDesgnString = @Html.Raw(Json.Encode(HrAdmin));
    var HRCAdminDesgnString = @Html.Raw(Json.Encode(HRC));
    var TreasuryDesgnString = @Html.Raw(Json.Encode(Treasury));
    pageLoad();
    var errorCount = 0;
    var errors = "";

    function pageLoad() {
        //AddFocusEvent();
        $("#headingErr").addClass('d-none');
        var data = "";
        if (IsViewMode) {
            $(".inpDisable").attr("disabled", "disabled");
            $(".drpDisable").attr("disabled", "disabled");
            AddCheckBoxEvents();
        }
        if (IsNewMode) {
            GetApprovers();
        }
        if (IsEditMode) {
            $(".inpDisable").attr("disabled", "disabled");
            GetApprovers();
        }
    };

    function allowNumbersOnly(e) {
        var code = (e.which) ? e.which : e.keyCode;
        if (code > 31 && (code < 48 || code > 57)) {
            e.preventDefault();
        }
    }

    function setStartDate() {
        var today = new Date().toISOString().split('T')[0];
        document.getElementsByName("txtDateOfRelieving")[0].setAttribute("min", today);
    }

    function GetApprovers() {
        $.ajax({
            url: '/EmployeeClearance/GetECFSequentialApprovalList',
            type: 'GET',
            data: {},
            dataType: 'JSON',
            success: (function (data) {
                ////
                approverData = data;
                console.log(data);
                var row = "";
                for (var i = 0; i < data.length; i++) {
                    row += '<input type="hidden" id="hidden' + data[i].Department + 'Approver" name="hidden' + data[i].Department + 'Approver" value="' + data[i].ApproverEmailId + '">';
                }
                $("#hiddenApproverInformation").html(row);

            }),
            error: (function (data) {
                //code
            })
        })

    }

    $("#btnSubmit").on('click', function (e) {
        //var errors = "";
        validateSubmitter();
        validateApplicant();
        var dateOfJoining = document.getElementById("txtDateOfJoining").value;
        if (dateOfJoining == "") {
            errors += "<li id='error" + errorCount + "'>" + "Date of Joining" + "</li>";
            AddError("txtDateOfJoining", '', errorCount);
            errorCount++;
        }
        else {
            RemoveError("txtDateOfJoining");
        }

        var dateOfRelieving = document.getElementById("txtDateOfRelieving").value;
        if (dateOfRelieving == "") {
            errors += "<li id='error" + errorCount + "'>" + "Date of Relieving" + "</li>";
            AddError("txtDateOfRelieving", '', errorCount);
            errorCount++;
        }
        else {
            RemoveError("txtDateOfRelieving");
        }

        var data = document.getElementById("txtResignationGivenDate").value;
        if (data == "") {
            errors += "<li id='error" + errorCount + "'>" + "Resignation given date" + "</li>";
            AddError("txtResignationGivenDate", '', errorCount);
            errorCount++;
        }
        else {
            RemoveError("txtResignationGivenDate");
        }

        var chargeHandedOverTo = document.getElementById("txtChargeHandedOverToEmpName").value;
        if (chargeHandedOverTo == "") {
            errors += "<li id='error" + errorCount + "'>" + "Charge to be handed over" + "</li>";
            AddError("txtChargeHandedOverToEmpName", '', errorCount);
            errorCount++;
        }
        else {
            RemoveError("txtChargeHandedOverToEmpName");
        }

        var BusinessNeed = document.getElementById("txtBusinessNeed").value;
        if (BusinessNeed == "") {
            errors += "<li id='error" + errorCount + "'>" + "Business Function & Responsibility" + "</li>";
            AddError("txtBusinessNeed", '', errorCount);
            errorCount++;
        }
        else {
            RemoveError("txtBusinessNeed");
        }

        if (errors.length) {
            errors = "<ol id='errorList'>" + errors + "</ol>";
            $("#headingErr").removeClass('d-none');
            document.getElementById("add_to_me").innerHTML = errors;
            errors = "";
            errorCount = 0;
            if (IsEditMode) {
                $("#myModalRequest").scrollTop(0);
            }
            else {
                $(window).scrollTop(0);
            }
            return false;
        }
        $("#headingErr").addClass('d-none');
        document.getElementById("add_to_me").innerHTML = '';
        $("#pageLoader").removeClass('invisible');
        errors = "";
        errorCount = 0;
        $("#btnSubmit").text('Saving');
        $("#btnSubmit").prop("disabled", true);
        $("#btnCancel").prop("disabled", true);

        var form = $("#ECFForm").serialize();
        form = form + '&EmpLocationID=' + $("#ddEmpLocation option:selected").attr("LocationId");
        form = form + '&OtherEmpLocationID=' + $("#ddOtherEmpLocation option:selected").attr("LocationId");
        form = form + '&OtherNewEmpLocationID=' + $("#ddOtherNewEmpLocation option:selected").attr("LocationId");
        if (!form.includes("txtEmployeeName")) {
            form = form + '&txtEmployeeName=' + encodeURIComponent($("#txtEmployeeName").val());
        }
        $("#tab").val(2);
        $.ajax({
            url: '/EmployeeClearance/SaveECF',
            type: 'POST',
            data: form,
            dataType: 'JSON',
            success: (function (data) {
                if (data.Status == 200) {
                    //
                    $("#pageLoader").addClass('invisible');
                    if (IsNewMode) {
                        $("#btnSubmit").text('Submit');
                    }
                    else {
                        $("#btnSubmit").text('Re-Submit');
                    }
                    $("#btnSubmit").prop("disabled", false);
                    $("#btnCancel").prop("disabled", false);
                    successModal("ECF" + data.Message);
                    //$("#ECFForm").trigger("reset");
                }
                else {
                    failureModal(data.Message);
                    if (IsNewMode) {
                        $("#btnSubmit").text('Submit');
                    }
                    else {
                        $("#btnSubmit").text('Re-Submit');
                    }
                    $("#pageLoader").addClass('invisible');
                    $("#btnSubmit").prop("disabled", false);
                    $("#btnCancel").prop("disabled", false);
                    //$("#ECFForm").trigger("reset");
                }
            }),
            error: (function (data) {
                failureModal(data.Message);
                console.log("error");
                if (IsNewMode && IsEditMode) {
                    $("#btnSubmit").text('Submit');
                }
                else {
                    $("#btnSubmit").text('Re-Submit');
                }
                $("#pageLoader").addClass('invisible');
                $("#btnSubmit").prop("disabled", false);
                $("#btnCancel").prop("disabled", false);
                //$("#ECFForm").trigger("reset");
            })
        })
    });

    $("#btnCancel").on('click', function (e) {
        //
        $("#headingErr").addClass('d-none');
        document.getElementById("add_to_me").innerHTML = '';
        if ($('#myModalRequest').hasClass('show'))
            $('#myModalRequest').modal('hide');
        else
            $('#myModalEdit').modal('hide');
        if (IsNewMode) {
            window.location = "../Dashboard";
        }
    });

    function validityModal(txt, isComment) {
        //
        if (txt == 'approve') {

            if (isComment == "") {
                DisplayAlert('error', 'Warning', 'Please type in the reason for approving the form');
            }
            else if (isComment !== "") {
                DisplayAlert('error', 'Warning', 'Please fill all the required fields of the Payroll clearance');
            }
        }
        //else if (txt == 'reject') {
        //    DisplayAlert('error', 'Warning', 'Please type in the reason for rejecting the form');
        //}
        else if (txt == 'enquire') {
            DisplayAlert('error', 'Warning', 'Please type in the reason for enquiring the form');
        }
    }

    function ValidityUpdate() {
        ////
        var form = $("#ECFForm").serialize();
        $.ajax({
            url: '/EmployeeClearance/ECFValidityUpdate',
            type: 'POST',
            data: form,
            dataType: 'JSON',
            success: (function (data) {
                if (data == 1) {
                    //successModal(text);
                    $("#ECFForm").trigger("reset");
                    //setTimeout(FilterMyTasks(0, 0), 8000);
                    //window.location.reload();
                    //setTimeout(FilterMyTasks, 8000)
                    /*setTimeout(ReloadMyTasks, 8000)*/
                }
                else {
                    failureModal();
                    $("#ECFForm").trigger("reset");
                }
            }),
            error: (function (data) {
                failureModal();
                $("#ECFForm").trigger("reset");
            })
        })

    }

    function saveResponse(text) {
        //  //
        var errors = "";
        var status = '', comment = '';
        comment = $("#comment-" + text).val();
        $("#tab").val(1);
        switch (text) {
            case 'approve': {
                status = 'Approved';
                if (CurrentUserDesgn === RequiredDesgnString) {
                    var data = document.getElementById("txtResignationReceivedDate").value;
                    if (data == "") {
                        errors += "<li id='error" + errorCount + "'>" + "Resignation received on" + "</li>";
                        AddError("txtResignationReceivedDate", '', errorCount);
                        errorCount++;
                    }
                    else {
                        RemoveError("txtResignationReceivedDate");
                    }

                    data = document.getElementById("chkNoticePeriod").value;
                    if (data == "") {
                        errors += "<li id='error" + errorCount + "'>" + "Notice Period" + "</li>";
                        $("#chkNoticePeriodApplicable").addClass('removeNoticePeriod');
                        $("#chkNoticePeriodNotApplicable").addClass('removeNoticePeriod');
                        AddError("lblNoticePeriod", 'removeNoticePeriod', errorCount);
                        errorCount++;
                    }
                    else {
                        RemoveError("lblNoticePeriod");
                    }

                    if (data == "Applicable") {
                        data = document.getElementById("txtNoticeApplicableDays").value;
                        if (data < 1) {
                            errors += "<li id='error" + errorCount + "'>" + "Applicable days" + "</li>";
                            AddError("txtNoticeApplicableDays", '', errorCount);
                            errorCount++;
                        }
                        else {
                            RemoveError("txtNoticeApplicableDays");
                        }
                    }

                    data = document.getElementById("chkGratuity").value;
                    if (data == "") {
                        errors += "<li id='error" + errorCount + "'>" + "Eligible for Gratuity" + "</li>";
                        $("#chkGratuityYes").addClass('removeGratuity');
                        $("#chkGratuityNo").addClass('removeGratuity');
                        AddError("lblEligibleForGratuity", 'removeGratuity', errorCount);
                        errorCount++;
                    }
                    else {
                        RemoveError("lblEligibleForGratuity");
                    }
                    if (errors.length) {
                        DisplayAlert('error', 'Error', 'Please enter the details in Action Section');
                        errors = "<ol id='errorList'>" + errors + "</ol>";
                        $("#headingErr").removeClass('d-none');
                        document.getElementById("add_to_me").innerHTML = errors;
                        errors = "";
                        errorCount = 0;
                        if (IsViewMode) {
                            $("#myModal5").scrollTop(0);
                        }
                        else {
                            $(window).scrollTop(0);
                        }
                        $('.action-accordion').collapse('show');
                        return false;
                    }
                    $("#headingErr").addClass('d-none');
                    document.getElementById("add_to_me").innerHTML = '';
                    errors = "";
                    errorCount = 0;
                    var form = $("#ECFForm").serialize();
                    spinner.show();
                    $.ajax({
                        url: '/EmployeeClearance/SaveApproverResponse',
                        type: 'POST',
                        data: form,
                        dataType: 'JSON',
                        success: (function (data) {
                            console.log(data);
                            if (data) {
                                SaveFormStatusResponse(status, appRowId, comment, approvalType, text);
                                //$("#CBRFForm").trigger("reset");
                            }
                            else {
                                failureModal();
                                spinner.hide();
                                //$("#CBRFForm").trigger("reset");
                            }
                        }),
                        error: (function (data) {
                            failureModal();
                            spinner.hide();
                            //$("#CBRFForm").trigger("reset");
                        })
                    })
                    return;
                }
                else if (CurrentUserDesgn === HRCAdminDesgnString) {
                    if (($("#chkDisciplinaryActionYes").prop("checked") == false) && ($("#chkDisciplinaryActionNo").prop("checked") == false)) {
                        errors += "<li id='error" + errorCount + "'>" + "Any disciplinary action taken in the assessment period" + "</li>";
                        $("#chkDisciplinaryActionYes").addClass('removeDisciplinaryAction');
                        $("#chkDisciplinaryActionNo").addClass('removeDisciplinaryAction');
                        AddError("lblDisciplinaryAction", 'removeDisciplinaryAction', errorCount);
                        errorCount++;
                    }
                    else
                        RemoveError("lblDisciplinaryAction");

                    if (errors.length) {
                        DisplayAlert('error', 'Error', 'Please enter the details in Action Section');
                        errors = "<ol id='errorList'>" + errors + "</ol>";
                        $("#headingErr").removeClass('d-none');
                        document.getElementById("add_to_me").innerHTML = errors;
                        errors = "";
                        errorCount = 0;
                        if (IsViewMode) {
                            $("#myModal5").scrollTop(0);
                        }
                        else {
                            $(window).scrollTop(0);
                        }
                        $('.action-accordion').collapse('show');
                        return false;
                    }
                    $("#headingErr").addClass('d-none');
                    document.getElementById("add_to_me").innerHTML = '';
                    errors = "";
                    errorCount = 0;
                    var form = $("#ECFForm").serialize();
                    spinner.show();
                    $.ajax({
                        url: '/EmployeeClearance/SaveApproverResponse',
                        type: 'POST',
                        data: form,
                        dataType: 'JSON',
                        success: (function (data) {
                            console.log(data);
                            if (data) {
                                SaveFormStatusResponse(status, appRowId, comment, approvalType, text);
                                //$("#CBRFForm").trigger("reset");
                            }
                            else {
                                failureModal();
                                spinner.hide();
                                //$("#CBRFForm").trigger("reset");
                            }
                        }),
                        error: (function (data) {
                            failureModal();
                            spinner.hide();
                            //$("#CBRFForm").trigger("reset");
                        })
                    })
                    return;
                }
                else if (CurrentUserDesgn === TreasuryDesgnString) {
                    if (($("#chkCreditCardYes").prop("checked") == false) && ($("#chkCreditCardNo").prop("checked") == false)) {
                        errors += "<li id='error" + errorCount + "'>" + "Credit Card" + "</li>";
                        $("#chkCreditCardYes").addClass('removeCreditCard');
                        $("#chkCreditCardNo").addClass('removeCreditCard');
                        AddError("lblCreditCard", 'removeCreditCard', errorCount);
                        errorCount++;
                    }
                    else
                        RemoveError("lblCreditCard");

                    if (errors.length) {
                        DisplayAlert('error', 'Error', 'Please enter the details in Action Section');
                        errors = "<ol id='errorList'>" + errors + "</ol>";
                        $("#headingErr").removeClass('d-none');
                        document.getElementById("add_to_me").innerHTML = errors;
                        errors = "";
                        errorCount = 0;
                        if (IsViewMode) {
                            $("#myModal5").scrollTop(0);
                        }
                        else {
                            $(window).scrollTop(0);
                        }
                        $('.action-accordion').collapse('show');
                        return false;
                    }
                    $("#headingErr").addClass('d-none');
                    document.getElementById("add_to_me").innerHTML = '';
                    errors = "";
                    errorCount = 0;
                    var form = $("#ECFForm").serialize();
                    spinner.show();
                    $.ajax({
                        url: '/EmployeeClearance/SaveApproverResponse',
                        type: 'POST',
                        data: form,
                        dataType: 'JSON',
                        success: (function (data) {
                            console.log(data);
                            if (data) {
                                SaveFormStatusResponse(status, appRowId, comment, approvalType, text);
                                //$("#CBRFForm").trigger("reset");
                            }
                            else {
                                failureModal();
                                spinner.hide();
                                //$("#CBRFForm").trigger("reset");
                            }
                        }),
                        error: (function (data) {
                            failureModal();
                            spinner.hide();
                            //$("#CBRFForm").trigger("reset");
                        })
                    })
                    return;
                }
                spinner.show();
                SaveFormStatusResponse(status, appRowId, comment, approvalType, text);
                break;
            }
            case 'reject': {
                status = 'Rejected';
                if (comment == '') {
                    validityModal(text);
                    return;
                }
                spinner.show();
                SaveFormStatusResponse(status, appRowId, comment, approvalType, text);
                break;
            }
            case 'enquire': {
                status = 'Enquired';
                if (comment == '') {
                    validityModal(text);
                    return;
                }
                spinner.show();
                SaveFormStatusResponse(status, appRowId, comment, approvalType, text);
                break;
            }
        }
    }

    function SaveFormStatusResponse(status, appRowId, comment, approvalType, text) {
        $.ajax({
            url: '/List/SaveResponse',
            type: 'POST',
            data: { response: status, appRowId: appRowId, comment: comment, approvalType: approvalType },
            dataType: 'JSON',
            success: (function (data) {
                console.log(data)
                if (data.Result == 1) {
                    successModal(text);
                    spinner.hide();
                    $("#ECFForm").trigger("reset");
                    setTimeout(FilterMyTasks, 8000);
                }
                else {
                    failureModal();
                    $("#ECFForm").trigger("reset");
                    spinner.hide();
                }
            }),
            error: (function (data) {
                failureModal();
                $("#ECForm").trigger("reset");
                spinner.hide();
            })
        })
    }

    function AddCheckBoxEvents() {
        $('input:checkbox[id="chkNoticePeriodApplicable"]').click(function () {
            if ($(this).prop("checked") == true) {
                $('input[id="chkNoticePeriodApplicable"]').prop('disabled', true);
                $('input[id="chkNoticePeriodNotApplicable"]').prop('checked', false).change();
                $('input[id="chkNoticePeriodNotApplicable"]').prop("disabled", false);
                $('#chkNoticePeriod').val('Applicable');
                $('#divApplicableDays').removeClass('d-none');
            }
        });
        $('input:checkbox[id="chkNoticePeriodNotApplicable"]').click(function () {
            if ($(this).prop("checked") == true) {
                $('input[id="chkNoticePeriodNotApplicable"]').prop('disabled', true);
                $('input[id="chkNoticePeriodApplicable"]').prop("checked", false).change();
                $('input[id="chkNoticePeriodApplicable"]').prop("disabled", false);
                $('#chkNoticePeriod').val('Not applicable');
                $('#divApplicableDays').addClass('d-none');
            }
        });

        $('input:checkbox[id="chkGratuityYes"]').click(function () {
            if ($(this).prop("checked") == true) {
                $('input[id="chkGratuityYes"]').prop('disabled', true);
                $('input[id="chkGratuityNo"]').prop('checked', false).change();
                $('input[id="chkGratuityNo"]').prop("disabled", false);
                $('#chkGratuity').val('Yes');
            }
        });
        $('input:checkbox[id="chkGratuityNo"]').click(function () {
            if ($(this).prop("checked") == true) {
                $('input[id="chkGratuityNo"]').prop('disabled', true);
                $('input[id="chkGratuityYes"]').prop("checked", false).change();
                $('input[id="chkGratuityYes"]').prop("disabled", false);
                $('#chkGratuity').val('No');
            }
        });

        $('input:checkbox[id="chkDisciplinaryActionYes"]').click(function () {
            if ($(this).prop("checked") == true) {
                $('input[id="chkDisciplinaryActionYes"]').prop('disabled', true);
                $('input[id="chkDisciplinaryActionNo"]').prop('checked', false).change();
                $('input[id="chkDisciplinaryActionNo"]').prop("disabled", false);
                $('#chkDisciplinaryAction').val('Yes');
            }
        });
        $('input:checkbox[id="chkDisciplinaryActionNo"]').click(function () {
            if ($(this).prop("checked") == true) {
                $('input[id="chkDisciplinaryActionNo"]').prop('disabled', true);
                $('input[id="chkDisciplinaryActionYes"]').prop("checked", false).change();
                $('input[id="chkDisciplinaryActionYes"]').prop("disabled", false);
                $('#chkDisciplinaryAction').val('No');
            }
        });

        $('input:checkbox[id="chkCreditCardYes"]').click(function () {
            if ($(this).prop("checked") == true) {
                $('input[id="chkCreditCardnYes"]').prop('disabled', true);
                $('input[id="chkCreditCardNo"]').prop('checked', false).change();
                $('input[id="chkCreditCardNo"]').prop("disabled", false);
                $('#chkCreditCard').val('Yes');
            }
        });
        $('input:checkbox[id="chkCreditCardNo"]').click(function () {
            if ($(this).prop("checked") == true) {
                $('input[id="chkCreditCardNo"]').prop('disabled', true);
                $('input[id="chkCreditCardYes"]').prop("checked", false).change();
                $('input[id="chkCreditCardYes"]').prop("disabled", false);
                $('#chkCreditCard').val('No');
            }
        });
    }

    $("#txtChargeHandedOverToEmpName").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: "/List/GetEmployeeDetails",
                datatype: "json",
                cache: false,
                async: true,
                data: {
                    searchText: $("#txtChargeHandedOverToEmpName").val()
                },
                success: function (data) {
                    data = data.filter(function (e) {
                        return e.Email !== "@currentUser.Email";
                    });
                    response($.map(data, function (item) {
                        return { label: item.FirstName, value: item.FirstName, raw: item };
                    }));
                }
            });
        },
        search: function (event, ui) {
            var value = $("#txtChargeHandedOverToEmpName").val();
            if (value.length < 4) {
                event.preventDefault();
            }
        },
        min_length: 4,
        change: function (event, ui) {
            if (!ui.item) {
                $(this).val('');
            }
        },
        delay: 0,
        select: function (event, ui) {
            var empOtherDetails = ui.item['raw'];
            $.ajax({
                url: "../List/GetExistingEmployeeDetails",
                dataType: "json",
                cache: false,
                async: true,
                data: {
                    otherEmpUserId: empOtherDetails.Email,
                    EmpNumber: empOtherDetails.EmpNumber
                },
                success: function (data) {

                    $('#txtChargeHandedOverToEmpNumber').val(data.EmpNumber);

                }
            });
        }
    });

    $("#txtChargeHandedOverToEmpName").autocomplete("option", "appendTo", ".autocompleteHandOver-div");

    function setStartDate() {
        var today = new Date().toISOString().split('T')[0];
        var doj = document.getElementById("txtDateOfJoining");
        if (today)
            doj.setAttribute("max", today);
        var startDate = doj;
        var dor = document.getElementById("txtDateOfRelieving");
        if (startDate.value)
            dor.setAttribute("min", startDate.value.split('T')[0]);
        var rgd = document.getElementById("txtResignationGivenDate");
        if (startDate.value)
            rgd.setAttribute("min", startDate.value.split('T')[0]);
    }

    function alphaOnly(e) {
        var key = e.keyCode;
        if (key > 32 && (key < 65 || key > 122 || key == 91 || key == 92 || key == 93 || key == 94 || key == 95 || key == 96)) {
            e.preventDefault();
        }
    }

    function successModal(txt) {
        ////
        $('#modalTitle').html('Success');
        if (txt == "approve") {
            $('#modalBody').html('Form has been approved!');
        }
        else if (txt == "reject") {
            $('#modalBody').html('Form has been rejected!');
        }
        else if (txt == "enquire") {
            $('#modalBody').html('Form has been enquired!');
        }
        else if (txt == "cancelled") {
            $('#modalBody').html('Form has been cancelled!');
        }
        else {
            if (IsEditMode) {
                $('#modalBody').html('Your form with ID:' + txt + ' has been re-submitted! Kindly use this for future reference');
            }
            else {
                $('#modalBody').html('Your form with ID:' + txt + ' has been submitted! Kindly use this for future reference');
            }
        }
        //$('#modalBody').html('Your form has been submitted!');
        $("#modalOkButton").attr('data-dismiss', 'modal');
        $("#successModel").modal('show');
    }

    function failureModal(msg) {
        $('#modalTitle').html('Failure');
        $('#modalBody').html(msg);
        $("#modalOkButton").attr('data-dismiss', 'modal');
        $("#successModel").modal('show');
    }

    $('#successModel').on('hide.bs.modal', function () {
        ////
        var tab = $("#tab").val();
        if (tab == 1) {
            GetMyTaskTab();
        }
        else if (tab == 2) {
            window.location = "../Dashboard?tab=" + tab;
        }
    })

    @* function func() {
        ////
        var name = document.getElementById("txtName");
        var department = document.getElementById("txtDepartment");
        var txtEmployeeNumber = document.getElementById("txtEmployeeCode");

        name.value = "@currentUser.FirstName" + " " + "@currentUser.LastName";
        department.value = "@currentUser.Department";
        txtEmployeeNumber.value = "@currentUser.EmpNumber";
    } *@

    //$('#myModal').modal({ backdrop: 'static', keyboard: false })

    //$("#drpNoticePeriod").change(function () {
    //    ////
    //    if ($(this).val() == "Yes") {
    //        $('#txtApplicableDays').show();
    //    }
    //    else if ($(this).val() == "No") {
    //        $('#txtApplicableDays').hide();
    //    }
    //});
    //$("#drpNoticePeriod").trigger("change");


    //function mobileLengthModal() {
    //    $('#modalTitle').html('Required');
    //    $('#modalBody').html('Please enter a 10-Digit Mobile No.!');
    //    $("#modalOkButton").attr('data-dismiss', 'modal');
    //    $("#successModel").modal('show');
    //}

    //$("#txtEmployeeCode").autocomplete({
    //    source: function (request, response) {
    //        $.ajax({
    //            url: "/EmployeeClearance/GetECFEmployeeDetails",
    //            dataType: "json",
    //            cache: false,
    //            async: false,
    //            data: {
    //                searchText: $("#txtEmployeeCode").val()
    //            },
    //            success: function (data) {
    //                ////
    //                response($.map(data, function (item) {
    //                    console.log("EmployeeCode");
    //                    console.log(data, 'data');
    //                    return { label: item.UserId, value: item.UserId, raw: item };
    //                }));
    //            }
    //        });
    //    },
    //    search: function (event, ui) {
    //        var value = $("#txtEmployeeCode").val();
    //        console.log(value);
    //        // If less than three chars, cancel the search event
    //        if (value.length < 4) {
    //            event.preventDefault();
    //        }
    //    },
    //    min_length: 4,
    //    delay: 0,
    //    select: function (event, ui) {
    //        //
    //        var empOtherDetails = ui.item['raw'];
    //        console.log(empOtherDetails);
    //        console.log("select");
    //        //Get the other details like Cost Center Code, Employee Number from DB.
    //        $.ajax({
    //            url: "/EmployeeClearance/GetECFExistingEmployeeDetails",
    //            dataType: "json",
    //            cache: false,
    //            async: false,
    //            data: {
    //                otherEmpUserId: empOtherDetails.UserId,
    //            },
    //            success: function (data) {
    //                console.log("select success");
    //                console.log(data, 'data');

    //                $('#txtName').val(data.EmployeeName);
    //                $('#txtDepartment').val(data.Department);
    //                //$('#txtLocation').val(data.Location);
    //                $('#txtEmail').val(data.Email);
    //                //$('#txtDesignation').val(data.DepartmentFrom);
    //                //$('#txtCurrentRoleFrom').val(data.DepartmentFrom);
    //                //$('#txtDivisionFrom').val(data.DepartmentFrom);
    //                //$('#txtDepartmentFrom').val(data.DepartmentFrom);
    //                //$('#txtSubDepartmentFrom').val(data.SubDepartmentFrom);
    //                //$('#txtReportingManagerFrom').val(data.ReportingManagerFrom);
    //                //$('#txtCostCentreFrom').val(data.CostCentreFrom);

    //            }
    //        });
    //    }
    //});

    //$("#txtHandOver").autocomplete({
    //    source: function (request, response) {
    //        $.ajax({
    //            url: "/EmployeeClearance/GetECFChargeHandOverEmployeeDetails",
    //            dataType: "json",
    //            cache: false,
    //            async: false,
    //            data: {
    //                searchText: $("#txtHandOver").val()
    //            },
    //            success: function (data) {
    //                ////
    //                response($.map(data, function (item) {
    //                    console.log("EmployeeCode");
    //                    console.log(data, 'data');
    //                    return { label: item.UserName, value: item.UserName, raw: item };
    //                }));
    //            }
    //        });
    //    },
    //    search: function (event, ui) {
    //        var value = $("#txtHandOver").val();
    //        console.log(value);
    //        // If less than three chars, cancel the search event
    //        if (value.length < 4) {
    //            event.preventDefault();
    //        }
    //    },
    //    min_length: 4,
    //    delay: 0,
    //    select: function (event, ui) {
    //        //
    //        var empOtherDetails = ui.item['raw'];
    //        console.log(empOtherDetails);
    //        console.log("select");
    //        //Get the other details like Cost Center Code, Employee Number from DB.
    //        $.ajax({
    //            url: "/EmployeeClearance/GetECFChargeHandOverExistingEmployeeDetails",
    //            dataType: "json",
    //            cache: false,
    //            async: false,
    //            data: {
    //                otherEmpUserId: empOtherDetails.UserId,
    //            },
    //            success: function (data) {
    //                console.log("select success");
    //                console.log(data, 'data');

    //                //$('#txtName').val(data.EmployeeName);
    //                //$('#txtDepartment').val(data.Department);
    //                //$('#txtLocation').val(data.Location);
    //                //$('#txtEmail').val(data.Email);
    //                //$('#txtDesignation').val(data.DepartmentFrom);
    //                //$('#txtCurrentRoleFrom').val(data.DepartmentFrom);
    //                //$('#txtDivisionFrom').val(data.DepartmentFrom);
    //                //$('#txtDepartmentFrom').val(data.DepartmentFrom);
    //                //$('#txtSubDepartmentFrom').val(data.SubDepartmentFrom);
    //                //$('#txtReportingManagerFrom').val(data.ReportingManagerFrom);
    //                //$('#txtCostCentreFrom').val(data.CostCentreFrom);

    //            }
    //        });
    //    }
    //});

</script>